[day 29] 211006


디비에 있는 테이블
클라이언트가 요청한 페이지를 서버에서 찾음, 데이터가 필요하면 디비로 가서 가입된 회원 아이디, pw가 있는지 찾아봄. 있으면 로그인 성공 -> 클라이언트 화면에 뿌려줌.
만약 회원이 아니다. 회원이 아니라는 화면을 뿌려줌.
디비를 건드릴 때 내가 어떤 파일을 요청할 때마다 계속 ojdbc.jar 파일을 통해 디비를 건드림.
db에 자주 접근하는 과정이 리소스를 많이 사용함. 리소스 낭비 초래 (디비 연결하고, 찾고, 연결 끊고,,,)
-> 드라이버를 로드하고 연결하는 것을 미리 연결해놓자! : connection full이라고 함. 기본 8개 연결?
ex) 수영장에 미리 튜브를 띄워놓고(미리 디비를 연결해놓고) 고객이 사용하도록함.(클라이언트가 디비에서 작업하고 연결 끊지 않고 나가기)
  ? - 접속량이 적은 시간
    - http 프로토콜 : 연결하고 데이터를 보내주고 나서 바로 연결을 끊음.

connection full을 위해서 아파치에서 dbcp, pool 라이브러리를 다운받아야했다. 근데 이거보다 좀 더 나은게 톰캣에서 제공하는 것. 톰캣 설치 위치에 lib폴더 > tomcat-dbcp.jar 하나로 두 라이브러리를 대체할 수 있음.



> spring boot
- Spring Starter Project
- 자바 버전 11 - 타입 추론 기능이 추가됨
- spring boot app으로 실행
- 스프링 부트는 내부에 톰캣이 이미 있음.
- 포트번호는 8080
- @SpringBootApplication 이 annotation이 있는 곳이 메인이 됨.
- application.properties 에서 설정을 변경할 수 있음.

- controller 생성 : @RestController - REST API의 컨트롤러


-get전송방식, post전송방식
-annotation들

[day 30] 211007

> 복습

-  RESTful API
일반적 클라이언트가 서버에 요청하면 서버는 뷰 페이지를 반환
client -> Dispatcher Servlet -> Front Controller -> 여러 컨트롤러로 나뉨. 해당하는 뷰 페이지를 찾음.
http의 특징, 전송방식을 이용해 데이터 전송함. http 메소드(get, post, put, delete)를 사용해 클라이언트에 데이터를 줌. 데이터는 json 형식으로 보냄. 

- @RequestBody : http요청의 body내용을 자바 객체로 매핑하는 역할
- @ResponseBody : 자바 객체를 http요청의 body 내용으로 매핑하는 역할
- spring ajax : json 데이터 처리
  - ajax에서 JSON.springfy로 넘긴 파라미터를 서버에서 @ResponseBody로 받음

>
- uri는 정보의 자원을 표현해야함
- 자원에 대한 행위는 http method로 표현해야함.
- http 주로쓰는 메서드
  - GET : 조회
  - POST : 리소스 생성
  - PUT : 리소스 전체 갱신
  - PATCH : 리소스 부분 갱신
  - DELETE : 리소스 삭제
  - 이외 HEAD, OPTION, TRACE, CONNECT
 
> URL 설계 규칙
1. 소문자 사용
2. 언더바 대신 하이픈 사용
3. 마지막 슬래스 포함하지 않음. 슬래시는 계층 구분하는 용도 마지막에 사용 안함
4. 행위는 포함하지 않음. url 대신 method 사용해 행위 전달.
5. 파일 확장자는 URL에 포함시키지 않음.
6. 전달하고자 하는 자원의 명사 사용. 컨트롤 자원을 의미하면 예외적으로 동사

프로젝트 이름+Application.java 에 메인 메소드가 있음. 루트 패키지에 메인이 있어야함. 실행할 때는 SpringApplication.run(클래스 이름.class, args);

> GET
> path variable (@PathVariable)
> query param (@RequestParam)
> 객체일때는 annotation X

> POST
dto 쓰는 거 까지 했다.
@JsonProperty

> PUT
@JsonNaming
@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class) : 카멜케이스 -> 스네이크형식으로 클래스 전체에 적용

> Lombok 
@ToString(callSuper=true : 부모가 가지고 있는 to string을 부르는 것, includeFieldNames = rue: 이게 있어야 필드 값이 나온다.)
@ToString.Exclude 변수 선언; : ToString 출력에서 제외시키기

> Delete
- 리소스 삭제 : 200

> Response
req -> response 까지 내부적 과정 // request -> object 타입으로 매핑됨 -> object -> method를 탐 -> object -> object mapper -> json 타입 -> response

만약 DTO의 변수가 primitive type일 때 리턴을 제대로 못받아올 때가 있음 : int -> Integer 이렇게 Wrapper class인 객체로 바꾸기

> RestBoard
다시 스프링 프레임워크로 돌아오면,,,,,,,,,,,,,,,,
서버실행이 안된다
ㅡㅡ