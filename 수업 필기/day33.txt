[day 33]

> 복습 : spring security
- 해당 페이지로 분기할 수 있도록 권한 주는 것.

> 복습 : Vue.js
- 어제 codepen으로 간단하게 vue 써봄. cdn 방식으로.

> extention > Vetur, material Theme, live server, night owl 설치

> vue를 쓰려면 라이브러리를 내부적으로 가지고 있거나, cdn 방식으로 걸어주어야함.

> data
- {{data}} : 브라켓 사이에 해당하는 키값

> components
- 태그처럼 component를 사용할 수 있음.

> cli로 프로젝트 생성하기 : vue-form
- 생성한 프로젝트로 cd : cd vue-form
- 서버 키기 : npm run serve
- vue 파일 보면 html / js / css 로 이루어져 있음
  - template : html
    - 무조건 하나의 태그만 있어야함. 
    - 하나의 태그안에 여러 태그는 가능
  - script : js
  - style : css

> vue로 로그인 폼 만들기

> vue - toast 메세지 띄우기


> 뷰 인스턴스 라이프 사이클
- created, beforeCreate, beforeMount, mounted, beforeUpdate, updated, beforeDestroy, destoryed
- 인스턴스 생성/ 인스턴스 화면에 부착/ 인스턴스 내용 갱신/ 인스턴스 소멸

> 인스턴스 생성
1. beforeCreated
- data 속성, methods 속성 인스턴스에 정의되어 있지 않음. 화면 요소에도 접근 불가
2. created
- data, methods 속성 정의됨. this.data, this.fetchData() 같은 로직 이용해 data, methods 속성에 정의된 값에 접근해 로직 실행가능.
- 인스턴스가 화면 요소에 부착되기 전 -> template 속성에 정의된 돔 요소로 접근 불가
- data, methods 속성에 접근할 수 있는 가장 첫 라이프 사이클 단계, 컴포넌트가 생성되고 나서 실행되는 단계
  -> 서버에 데이터를 요청해 받아오는 로직 수행
3. beforeMount
- created단계 이후 template 속성에 지정한 마크업 속성을 render() 함수로 변환한 뒤 호출
- el 속성에 지정한 화면 요소(돔)에 인스턴스 부착하기 전 호출되는 단계. : 돔에 인스턴스 부착하기 전에 호출.
- render() 함수가 호출되기 직전의 로직 추가
4. mounted
- el 속성에서 지정한 화면 요소에 인스턴스가 부착되고 호출되는 단계
- template 속성에 정의한 화면 요소에 접근할 수 있음 -> 화면 요소 제어하는 로직 수행
- 돔에 인스턴스 부착되자마자 바로 호출 -> 하위 컴포넌트나 외부 라이브러리에 의해 추가된 화면 요소들이 최종 html 코드로 변환되는 시점과 다를 수 있다.
> 인스턴스 화면에 부착
- 이후 데이터 값이 변경되어야 다음 라이프사이클을 탐.
5. beforeUpdate
- el 속성에서 지정한 화면 요소에 인스턴스 부착되고 나면 인스턴스에 정의한 속성들이 화면에 치환됨.
- 치환된 값은 뷰의 반응성을 제공하기 위해 $watch속성으로 감시 : 데이터 관찰
- 관찰하고 있는 데이터가 변경되면 가상 돔으로 화면을 다시 그리기 전에 호출되는 단계
- 변경 예정인 새 데이터에 접근할 수 있음.
- 변경 예정 데이터의 값과 관련된 로직을 미리 넣을 수 있다.
- 여기서 값을 변경하는 로직 추가해도 화면이 다시 그려지지 않음.
6. updated
- 데이터가 변경되고 나서 가상 돔으로 다시 화면을 그리고나면 실행되는 단계.
- 데이터 변경으로 인한 화면 요소 변경까지 완료된 시점.
- 데이터 변경 후 화면 요소 제어와 관련된 로직 추가
- 여기서 데이터 값을 변경하면 무한루프 가능성 -> computed, watch 속성 사용
- => 데이터 값 갱신은 beforeUpdate에 추가, updated에는 변경 데이터의 화면 요소와 관련된 로직 추가
> 인스턴스 내용 갱신
7. beforeDestroy
- 뷰 인스턴스가 파괴되기 직전에 호출되는 단계
- 아직 인스턴스에 접근할 수 있음.
- 뷰 인스턴스 데이터 삭제하는 로직
8. destroyed
- 뷰 인스턴스가 파괴되고 나서 호출되는 단계.
- 뷰 인스턴스에 정의한 모든 속성이 제거되고 하위에 선언한 인스턴스들 또한 모두 파괴.


> 뷰 컴포넌트
